/**
 * Fun√ß√£o para verificar problemas comuns de configura√ß√£o
 * Execute esta fun√ß√£o no console do navegador para diagnosticar problemas
 */
export const checkConfiguration = (): void => {
  console.group('üîç Verifica√ß√£o de Configura√ß√£o do EDP Sistema de Gest√£o');
  
  // Verificar vari√°veis de ambiente
  console.log('üìå Vari√°veis de ambiente:');
  console.log('  - VITE_API_URL:', import.meta.env.VITE_API_URL || '‚ùå N√£o definida');
  
  // Verificar estado de autentica√ß√£o
  console.log('üìå Estado de autentica√ß√£o:');
  const hasAccessToken = !!localStorage.getItem('access_token');
  const hasRefreshToken = !!localStorage.getItem('refresh_token');
  console.log('  - Token de acesso:', hasAccessToken ? '‚úÖ Presente' : '‚ùå Ausente');
  console.log('  - Token de atualiza√ß√£o:', hasRefreshToken ? '‚úÖ Presente' : '‚ùå Ausente');
  
  // Verificar conex√£o com a internet
  console.log('üìå Conex√£o:');
  console.log('  - Navegador online:', navigator.onLine ? '‚úÖ Sim' : '‚ùå N√£o');
  
  // Verificar compatibilidade do navegador
  console.log('üìå Compatibilidade do navegador:');
  const isModernBrowser = 'Promise' in window && 'fetch' in window;
  console.log('  - Navegador moderno:', isModernBrowser ? '‚úÖ Sim' : '‚ùå N√£o');
  
  // Verificar configura√ß√£o do proxy
  console.log('üìå Configura√ß√£o do proxy:');
  if (import.meta.env.DEV) {
    console.log('  - Modo de desenvolvimento:', '‚úÖ Ativo');
    console.log('  - Verifique se o proxy em vite.config.ts est√° configurado corretamente para apontar para o seu backend');
  } else {
    console.log('  - Modo de produ√ß√£o:', '‚úÖ Ativo');
    console.log('  - Verifique se o servidor est√° configurado com os cabe√ßalhos CORS corretos');
  }
  
  console.groupEnd();
};

// Exporta um m√©todo para verificar se o backend est√° respondendo
export const testBackendConnection = async (): Promise<void> => {
  const apiUrl = import.meta.env.VITE_API_URL || 'http://localhost:8080';
  console.group('üîÑ Teste de Conex√£o com o Backend');
  console.log('Testando conex√£o com:', apiUrl);
  
  try {
    const startTime = performance.now();
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), 5000);
    
    const response = await fetch(`${apiUrl}/`, {
      signal: controller.signal
    });
    
    clearTimeout(timeoutId);
    const endTime = performance.now();
    const timeMs = Math.round(endTime - startTime);
    
    if (response.ok) {
      console.log(`‚úÖ Conex√£o bem-sucedida (${timeMs}ms)`);
      try {
        const data = await response.json();
        console.log('Resposta:', data);
      } catch (e) {
        console.log('Resposta n√£o √© JSON. Status:', response.status);
      }
    } else {
      console.error(`‚ùå Resposta com erro. Status: ${response.status}`);
    }
  } catch (error) {
    console.error('‚ùå Falha na conex√£o com o backend:', error);
    console.log('Verifique se:');
    console.log('1. O servidor backend est√° rodando');
    console.log('2. A URL est√° correta');
    console.log('3. N√£o h√° problemas de CORS');
    console.log('4. A rede permite a conex√£o');
  }
  
  console.groupEnd();
};

// Adicione esta linha para habilitar a ferramenta no objeto window no ambiente de desenvolvimento
if (import.meta.env.DEV) {
  // @ts-ignore
  window.edpDebug = {
    checkConfiguration,
    testBackendConnection
  };
  console.log('üõ†Ô∏è Ferramentas de diagn√≥stico dispon√≠veis. Execute "edpDebug.checkConfiguration()" ou "edpDebug.testBackendConnection()" no console para diagn√≥sticos.');
}